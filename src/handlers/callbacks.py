"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤."""

import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from src.keyboards import (
    get_back_button,
    get_confirm_restart,
    get_logs_menu,
    get_main_menu,
)
from src.sui_api import SUiAPIError, SUiClient
from src.config import settings

logger = logging.getLogger(__name__)
router = Router()

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
sui_client = SUiClient(settings.sui_url, settings.sui_token)


def format_bytes(bytes_value: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    for unit in ["B", "KB", "MB", "GB", "TB"]:
        if bytes_value < 1024.0:
            return f"{bytes_value:.2f} {unit}"
        bytes_value /= 1024.0
    return f"{bytes_value:.2f} PB"


@router.callback_query(F.data == "back_to_menu")
async def callback_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback.message.edit_text(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu(),
    )
    await callback.answer()


@router.callback_query(F.data == "status")
async def callback_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞."""
    await callback.answer()
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
        response = await sui_client.get_status(resource="cpu,ram,disk,uptime,loads,netIO,tcpCount,udpCount")
        obj = response.get("obj", {})
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏: {list(obj.keys())}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status_text = "üìä <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:</b>\n\n"
        
        # CPU
        if "cpu" in obj:
            cpu = obj["cpu"]
            if isinstance(cpu, (int, float)):
                status_text += f"üñ• <b>CPU:</b> {cpu:.1f}%\n"
        
        # –ü–∞–º—è—Ç—å (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API —ç—Ç–æ "ram")
        if "ram" in obj:
            ram = obj["ram"]
            if isinstance(ram, dict):
                total = ram.get("total", 0)
                used = ram.get("used", 0)
                if total > 0:
                    percent = (used / total * 100)
                    status_text += f"üíæ <b>RAM:</b> {format_bytes(used)} / {format_bytes(total)} ({percent:.1f}%)\n"
        elif "mem" in obj:
            mem = obj["mem"]
            if isinstance(mem, dict):
                total = mem.get("total", 0)
                used = mem.get("used", 0)
                if total > 0:
                    percent = (used / total * 100)
                    status_text += f"üíæ <b>RAM:</b> {format_bytes(used)} / {format_bytes(total)} ({percent:.1f}%)\n"
        
        # –î–∏—Å–∫
        if "disk" in obj:
            disk = obj["disk"]
            if isinstance(disk, dict):
                total = disk.get("total", 0)
                used = disk.get("used", 0)
                if total > 0:
                    percent = (used / total * 100)
                    status_text += f"üíø <b>–î–∏—Å–∫:</b> {format_bytes(used)} / {format_bytes(total)} ({percent:.1f}%)\n"
        
        # Uptime
        if "uptime" in obj:
            uptime = obj["uptime"]
            if isinstance(uptime, (int, float)):
                days = int(uptime // 86400)
                hours = int((uptime % 86400) // 3600)
                minutes = int((uptime % 3600) // 60)
                status_text += f"\n‚è± <b>Uptime:</b> {days}–¥ {hours}—á {minutes}–º\n"
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ (loads)
        if "loads" in obj:
            loads = obj["loads"]
            if isinstance(loads, list) and len(loads) >= 3:
                status_text += f"üìà <b>Load Average:</b> {loads[0]:.2f}, {loads[1]:.2f}, {loads[2]:.2f}\n"
        
        # TCP/UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if "tcpCount" in obj:
            status_text += f"\nüîπ <b>TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</b> {obj['tcpCount']}\n"
        if "udpCount" in obj:
            status_text += f"üî∏ <b>UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</b> {obj['udpCount']}\n"
        
        # NetIO
        if "netIO" in obj:
            netio = obj["netIO"]
            if isinstance(netio, dict):
                up = netio.get("up", 0)
                down = netio.get("down", 0)
                status_text += f"\nüö¶ <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
                status_text += f"   ‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {format_bytes(up)}\n"
                status_text += f"   ‚¨áÔ∏è –ü–æ–ª—É—á–µ–Ω–æ: {format_bytes(down)}\n"
        
        # –û–Ω–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç—ã
        try:
            online_response = await sui_client.get_onlines()
            online_data = online_response.get("obj", {})
            online_users = online_data.get("user", []) if isinstance(online_data, dict) else []
            if online_users:
                status_text += f"\nüåê <b>–ö–ª–∏–µ–Ω—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω:</b> {len(online_users)}\n"
        except:
            pass
        
        await callback.message.edit_text(
            status_text,
            parse_mode="HTML",
            reply_markup=get_back_button(),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data == "clients")
async def callback_clients(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–º."""
    await callback.answer()
    
    try:
        response = await sui_client.get_clients()
        clients_data = response.get("obj", {})
        
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'clients'
        if isinstance(clients_data, dict):
            clients = clients_data.get("clients", [])
        elif isinstance(clients_data, list):
            clients = clients_data
        else:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {type(clients_data)}")
            clients = []
        
        if not clients:
            await callback.message.edit_text(
                "üë• <b>–ö–ª–∏–µ–Ω—Ç—ã:</b>\n\n–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="HTML",
                reply_markup=get_back_button(),
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            online_response = await sui_client.get_onlines()
            online_data = online_response.get("obj", {})
            online_users = online_data.get("user", []) if isinstance(online_data, dict) else []
        except:
            online_users = []
        
        from src.keyboards import get_clients_keyboard
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        total_up = 0
        total_down = 0
        for client in clients:
            if isinstance(client, dict):
                up = client.get("up", 0)
                down = client.get("down", 0)
                if isinstance(up, (int, float)):
                    total_up += up
                if isinstance(down, (int, float)):
                    total_down += down
        
        def format_traffic(bytes_val):
            if bytes_val < 1024**3:  # –ú–µ–Ω—å—à–µ 1GB
                return f"{bytes_val / (1024**2):.2f}MB"
            else:
                return f"{bytes_val / (1024**3):.2f}GB"
        
        text = f"üë• <b>–ö–ª–∏–µ–Ω—Ç—ã ({len(clients)}):</b>\n\n"
        text += f"üìä <b>–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:</b>\n"
        text += f"‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {format_traffic(total_up)}\n"
        text += f"‚¨áÔ∏è –ü–æ–ª—É—á–µ–Ω–æ: {format_traffic(total_down)}\n"
        text += f"üìà –í—Å–µ–≥–æ: {format_traffic(total_up + total_down)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_clients_keyboard(clients, online_users),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data.startswith("client_info:"))
async def callback_client_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫–∏."""
    await callback.answer()
    
    client_id = int(callback.data.split(":")[1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        response = await sui_client.get_clients()
        clients_data = response.get("obj", {})
        
        if isinstance(clients_data, dict):
            clients = clients_data.get("clients", [])
        else:
            clients = []
        
        # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
        client = None
        for c in clients:
            if c.get("id") == client_id:
                client = c
                break
        
        if not client:
            await callback.message.edit_text(
                "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_button(),
            )
            return
        
        name = client.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        enable = client.get("enable", False)
        volume = client.get("volume", 0)
        used_up = client.get("up", 0)
        used_down = client.get("down", 0)
        expiry = client.get("expiry", 0)
        desc = client.get("desc", "")
        group = client.get("group", "")
        inbound_ids = client.get("inbounds", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
        try:
            online_response = await sui_client.get_onlines()
            online_data = online_response.get("obj", {})
            online_users = online_data.get("user", []) if isinstance(online_data, dict) else []
            is_online = name in online_users
        except:
            is_online = False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        if is_online:
            status_icon = "üü¢"
            status_text = "–û–Ω–ª–∞–π–Ω"
        elif enable:
            status_icon = "üü°"
            status_text = "–û—Ñ–ª–∞–π–Ω"
        else:
            status_icon = "üî¥"
            status_text = "–û—Ç–∫–ª—é—á–µ–Ω"
        
        text = f"{status_icon} <b>{name}</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        used_total = used_up + used_down
        
        if volume > 0:
            percent = (used_total / volume * 100)
            remaining = volume - used_total
            text += f"\nüíæ <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
            text += f"   –õ–∏–º–∏—Ç: {format_bytes(volume)}\n"
            text += f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used_total)} ({percent:.1f}%)\n"
            text += f"   –û—Å—Ç–∞–ª–æ—Å—å: {format_bytes(remaining)}\n"
        else:
            text += f"\nüíæ <b>–¢—Ä–∞—Ñ–∏–∫:</b> {format_bytes(used_total)} (–±–µ–∑–ª–∏–º–∏—Ç)\n"
        
        text += f"   ‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞: {format_bytes(used_down)}\n"
        text += f"   ‚¨ÜÔ∏è –û—Ç–¥–∞—á–∞: {format_bytes(used_up)}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        try:
            settings_response = await sui_client.get_settings()
            settings_obj = settings_response.get("obj", {})
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /sub —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
            sub_uri = settings_obj.get("subURI", settings_obj.get("subPath", "/sub"))
            sub_domain = settings_obj.get("subDomain", "")
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∏–ª–∏ —Ç–µ–º –∂–µ —á—Ç–æ –∏ –ø–∞–Ω–µ–ª—å)
            sub_port = settings_obj.get("subPort", settings_obj.get("webPort", None))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: sub_uri={sub_uri}, sub_domain={sub_domain}, sub_port={sub_port}")
            
            # –ï—Å–ª–∏ sub_uri –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å /sub
            if not sub_uri or sub_uri.strip() == "":
                sub_uri = "/sub"
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ sub_uri –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
            if sub_uri and not sub_uri.startswith("/"):
                sub_uri = "/" + sub_uri
            
            from src.config import settings
            from urllib.parse import urlparse
            parsed = urlparse(settings.sui_url)
            
            if sub_domain:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
                if sub_port and sub_port not in [80, 443]:
                    sub_url = f"https://{sub_domain}:{sub_port}{sub_uri}/{name}"
                else:
                    sub_url = f"https://{sub_domain}{sub_uri}/{name}"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –±–æ—Ç–∞
                scheme = parsed.scheme
                hostname = parsed.hostname
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –∏–Ω–∞—á–µ –ø–æ—Ä—Ç –∏–∑ URL
                if sub_port:
                    port = sub_port
                else:
                    port = parsed.port
                
                if port and port not in [80, 443]:
                    sub_url = f"{scheme}://{hostname}:{port}{sub_uri}/{name}"
                else:
                    sub_url = f"{scheme}://{hostname}{sub_uri}/{name}"
            
            logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {sub_url}")
            text += f"\nüîó <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n<code>{sub_url}</code>\n"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º inbounds –¥–ª—è —Å—Å—ã–ª–æ–∫
        if inbound_ids:
            try:
                load_response = await sui_client.load_full_data()
                load_data = load_response.get("obj", {})
                inbounds = load_data.get("inbounds", [])
                
                text += f"\nüì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
                for inbound_id in inbound_ids:
                    for inbound in inbounds:
                        if inbound.get("id") == inbound_id:
                            tag = inbound.get("tag", "")
                            protocol = inbound.get("type", "")
                            port = inbound.get("listen_port", 0)
                            text += f"   ‚Ä¢ {tag} ({protocol}) - –ø–æ—Ä—Ç {port}\n"
            except:
                pass
        
        if expiry > 0:
            from datetime import datetime
            expiry_date = datetime.fromtimestamp(expiry / 1000)
            text += f"\nüìÖ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {expiry_date.strftime('%Y-%m-%d %H:%M')}\n"
        
        if group:
            text += f"üë• <b>–ì—Ä—É–ø–ø–∞:</b> {group}\n"
        
        if desc:
            text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
        
        from src.keyboards import get_client_actions
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_client_actions(client_id, name),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data == "inbounds")
async def callback_inbounds(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ inbound —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    await callback.answer()
    
    try:
        response = await sui_client.get_inbounds()
        inbounds_data = response.get("obj", {})
        
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'inbounds'
        if isinstance(inbounds_data, dict):
            inbounds = inbounds_data.get("inbounds", [])
        elif isinstance(inbounds_data, list):
            inbounds = inbounds_data
        else:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö inbounds: {type(inbounds_data)}")
            inbounds = []
        
        if not inbounds:
            await callback.message.edit_text(
                "üì• <b>Inbounds:</b>\n\nInbound —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="HTML",
                reply_markup=get_back_button(),
            )
            return
        
        text = "üì• <b>–°–ø–∏—Å–æ–∫ Inbound —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</b>\n\n"
        
        for idx, inbound in enumerate(inbounds, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ inbound - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            if not isinstance(inbound, dict):
                logger.warning(f"Inbound {idx} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {inbound}")
                continue
                
            tag = inbound.get("tag", "N/A")
            protocol = inbound.get("type", inbound.get("protocol", "N/A"))
            listen = inbound.get("listen", "::")
            port = inbound.get("listen_port", inbound.get("port", "N/A"))
            # enable –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            enable = inbound.get("enable", True)
            
            status = "‚úÖ" if enable else "‚ùå"
            
            text += f"{idx}. {status} <b>{tag}</b>\n"
            text += f"   üîå –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol}\n"
            text += f"   üåê –ê–¥—Ä–µ—Å: {listen}:{port}\n\n"
        
        if len(text) > 4000:
            text = text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button(),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ inbounds: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ inbounds:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data == "outbounds")
async def callback_outbounds(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ outbound —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    await callback.answer()
    
    try:
        response = await sui_client.get_outbounds()
        outbounds_data = response.get("obj", {})
        
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'outbounds'
        if isinstance(outbounds_data, dict):
            outbounds = outbounds_data.get("outbounds", [])
        elif isinstance(outbounds_data, list):
            outbounds = outbounds_data
        else:
            outbounds = []
        
        if not outbounds:
            await callback.message.edit_text(
                "üì§ <b>Outbounds:</b>\n\nOutbound —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="HTML",
                reply_markup=get_back_button(),
            )
            return
        
        text = "üì§ <b>–°–ø–∏—Å–æ–∫ Outbound —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</b>\n\n"
        
        for idx, outbound in enumerate(outbounds, 1):
            if not isinstance(outbound, dict):
                continue
                
            tag = outbound.get("tag", "N/A")
            out_type = outbound.get("type", "N/A")
            
            text += f"{idx}. <b>{tag}</b>\n"
            text += f"   üîå –¢–∏–ø: {out_type}\n\n"
        
        if len(text) > 4000:
            text = text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button(),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ outbounds: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ outbounds:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data == "tls")
async def callback_tls(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã."""
    await callback.answer()
    
    try:
        load_response = await sui_client.load_full_data()
        load_data = load_response.get("obj", {})
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"TLS data keys: {load_data.keys() if isinstance(load_data, dict) else 'not dict'}")
        
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'tls' –∏–ª–∏ 'tlsConfigs'
        if isinstance(load_data, dict):
            tls_certs = load_data.get("tls", load_data.get("tlsConfigs", []))
        else:
            tls_certs = []
        
        if not tls_certs:
            await callback.message.edit_text(
                "üîê <b>TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:</b>\n\n–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="HTML",
                reply_markup=get_back_button(),
            )
            return
        
        text = "üîê <b>TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:</b>\n\n"
        
        for idx, cert in enumerate(tls_certs, 1):
            if not isinstance(cert, dict):
                logger.warning(f"TLS cert {idx} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {cert}")
                continue
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"TLS cert {idx} –ø–æ–ª—è: {cert.keys()}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π
            server_name = cert.get("server_name", cert.get("serverName", cert.get("sni", "")))
            cert_file = cert.get("certificate", cert.get("cert", cert.get("cert_file", cert.get("certificateFile", ""))))
            key_file = cert.get("key", cert.get("key_file", cert.get("keyFile", "")))
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∏–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω–µ—Ç server_name
            cert_id = cert.get("id", idx)
            if not server_name:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –ø–æ–ª–µ–∑–Ω–æ–µ –∏–º—è
                for key in ["name", "tag", "domain"]:
                    if key in cert and cert[key]:
                        server_name = cert[key]
                        break
            
            if not server_name:
                server_name = f"TLS #{cert_id}"
            
            text += f"{idx}. <b>{server_name}</b>\n"
            if cert_file:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –Ω–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
                cert_name = cert_file.split("/")[-1] if "/" in cert_file else cert_file
                text += f"   üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_name}\n"
            if key_file:
                key_name = key_file.split("/")[-1] if "/" in key_file else key_file
                text += f"   üîë –ö–ª—é—á: {key_name}\n"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if "alpn" in cert:
                alpn = cert["alpn"]
                if isinstance(alpn, list):
                    text += f"   üîß ALPN: {', '.join(alpn)}\n"
                else:
                    text += f"   üîß ALPN: {alpn}\n"
            
            text += "\n"
        
        if len(text) > 4000:
            text = text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button(),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TLS: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TLS:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data == "config")
async def callback_config(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    await callback.answer()
    
    try:
        response = await sui_client.get_config()
        config_data = response.get("obj", {})
        
        text = "üìã <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
        
        if isinstance(config_data, dict):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for key, value in list(config_data.items())[:15]:  # –ü–µ—Ä–≤—ã–µ 15 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if isinstance(value, (str, int, bool, float)):
                    text += f"‚Ä¢ <code>{key}</code>: {value}\n"
        
        if len(text) < 50:
            text += "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        
        if len(text) > 4000:
            text = text[:4000] + "\n\n... (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞)"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button(),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ config: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data == "settings")
async def callback_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏."""
    await callback.answer()
    
    try:
        response = await sui_client.get_settings()
        settings_obj = response.get("obj", {})
        
        text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏:</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if "webPort" in settings_obj:
            text += f"üåê Web –ø–æ—Ä—Ç: <code>{settings_obj['webPort']}</code>\n"
        
        if "webDomain" in settings_obj:
            text += f"üåç –î–æ–º–µ–Ω: <code>{settings_obj['webDomain']}</code>\n"
        
        if "webBasePath" in settings_obj:
            text += f"üìÇ –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: <code>{settings_obj['webBasePath']}</code>\n"
        
        if "webListen" in settings_obj and settings_obj['webListen']:
            text += f"üîä Web Listen: <code>{settings_obj['webListen']}</code>\n"
        
        # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        if "webCertFile" in settings_obj or "webKeyFile" in settings_obj:
            text += f"\nüîê <b>SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:</b>\n"
            if "webCertFile" in settings_obj:
                text += f"   üìú Cert: <code>{settings_obj['webCertFile']}</code>\n"
            if "webKeyFile" in settings_obj:
                text += f"   üîë Key: <code>{settings_obj['webKeyFile']}</code>\n"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        if "subPort" in settings_obj:
            text += f"\nüì° <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n"
            text += f"   –ü–æ—Ä—Ç: <code>{settings_obj['subPort']}</code>\n"
        
        if "subPath" in settings_obj:
            text += f"   –ü—É—Ç—å: <code>{settings_obj['subPath']}</code>\n"
        
        if "subDomain" in settings_obj and settings_obj['subDomain']:
            text += f"   –î–æ–º–µ–Ω: <code>{settings_obj['subDomain']}</code>\n"
        
        if "subCertFile" in settings_obj or "subKeyFile" in settings_obj:
            text += f"\nüîê <b>SSL –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
            if "subCertFile" in settings_obj:
                text += f"   üìú Cert: <code>{settings_obj['subCertFile']}</code>\n"
            if "subKeyFile" in settings_obj:
                text += f"   üîë Key: <code>{settings_obj['subKeyFile']}</code>\n"
        
        # –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if "sessionTimeout" in settings_obj:
            text += f"\n‚è± –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏: {settings_obj['sessionTimeout']} –º–∏–Ω\n"
        
        if "timeLocation" in settings_obj:
            text += f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings_obj['timeLocation']}\n"
        
        if "trafficAge" in settings_obj:
            text += f"üìä –í–æ–∑—Ä–∞—Å—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {settings_obj['trafficAge']} –¥–Ω–µ–π\n"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button(),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data == "logs")
async def callback_logs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–æ–≥–æ–≤."""
    await callback.answer()
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤:",
        reply_markup=get_logs_menu(),
    )


@router.callback_query(F.data.startswith("logs_"))
async def callback_logs_count(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π."""
    await callback.answer()
    
    count = int(callback.data.split("_")[1])
    
    try:
        response = await sui_client.get_logs(count=count)
        logs = response.get("obj", [])
        
        if not logs:
            await callback.message.edit_text(
                "üìù <b>–õ–æ–≥–∏:</b>\n\n–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="HTML",
                reply_markup=get_back_button(),
            )
            return
        
        text = f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {count} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤:</b>\n\n"
        text += "```\n"
        
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É)
        for log in logs[-count:]:
            text += f"{log}\n"
        
        text += "```"
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ, –æ–±—Ä–µ–∑–∞–µ–º
        if len(text) > 4000:
            text = text[:4000] + "\n```\n... (–ª–æ–≥–∏ –æ–±—Ä–µ–∑–∞–Ω—ã)"
        
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_back_button(),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data == "restart_core")
async def callback_restart_core(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Core."""
    await callback.answer()
    await callback.message.edit_text(
        "üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Sing-Box Core</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Core?\n"
        "–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ—Ä–≤—ë—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
        parse_mode="HTML",
        reply_markup=get_confirm_restart("restart_core"),
    )


@router.callback_query(F.data == "restart_app")
async def callback_restart_app(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    await callback.answer()
    await callback.message.edit_text(
        "üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è S-UI</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=get_confirm_restart("restart_app"),
    )


@router.callback_query(F.data == "confirm_restart_core")
async def callback_confirm_restart_core(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Core."""
    await callback.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é Core...")
    
    try:
        await sui_client.restart_core()
        await callback.message.edit_text(
            "‚úÖ Sing-Box Core —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!",
            reply_markup=get_back_button(),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Core: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Core:\n{str(e)}",
            reply_markup=get_back_button(),
        )


@router.callback_query(F.data == "confirm_restart_app")
async def callback_confirm_restart_app(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    await callback.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    
    try:
        await sui_client.restart_app()
        await callback.message.edit_text(
            "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ S-UI —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!",
            reply_markup=get_back_button(),
        )
    except SUiAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n{str(e)}",
            reply_markup=get_back_button(),
        )

